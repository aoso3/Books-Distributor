import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.table.DefaultTableModel;

import main_classes.Author;
import main_classes.Book;

import java.util.ArrayList;

import javax.swing.AbstractListModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTextPane;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Usama
 */
public class Books_Edit extends javax.swing.JFrame {

	private Book book = Intro.bd.getBooksByName().get(Books.sel);
	private ArrayList<Author> all_authors = Intro.bd.getAuthorsByName();
	public ArrayList<Author> new_ar;
	
    /**
     * Creates new form Edit_A
     */
    public Books_Edit() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jButton1 = new javax.swing.JButton();
        textField_1 = new JTextField();
        textField_1.setColumns(10);
       
 
        jButton1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		if(!book.Authors.contains(all_authors.get(all_authors_list.getSelectedIndex()))){
        		book.Authors.add(all_authors.get(all_authors_list.getSelectedIndex()));
        		model.addElement(model2.getElementAt(all_authors_list.getSelectedIndex()));
        		}
        		else {
        			JOptionPane.showMessageDialog(null,"This Author already in this book list of authors");

        		}
        	}
        });

        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        jTextField1.setText(book.getTitle());
        
        Integer pc = book.getPageCount();

        jTextField2.setText(pc.toString());

        textField_1.setText(book.getPublishDate());
        
        
        jLabel1.setText("Title");

        jLabel2.setText("Page Count");

        jButton1.setText("Add Author");
        
        list = new JList();
        list.setModel(new AbstractListModel() {
        	String[] values = new String[] {"a"};
        	public int getSize() {
        		return values.length;
        	}
        	public Object getElementAt(int index) {
        		return values[index];
        	}
        });
        
        list_1 = new JList();
        list_1.setModel(new AbstractListModel() {
        	String[] values = new String[] {"b", "c"};
        	public int getSize() {
        		return values.length;
        	}
        	public Object getElementAt(int index) {
        		return values[index];
        	}
        });

        
        model = new DefaultListModel<>();
        my_authors_list = new JList<>( model );
        
        
        for(Author author : book.Authors){        	
        	model.addElement(author.getFirstName()+" "+author.getLastName());
        }
        
        model2 = new DefaultListModel<>();
        all_authors_list =  new JList<>( model2 );
        
         
         for(Author aut : all_authors){         	
          	model2.addElement(aut.getFirstName()+" "+aut.getLastName());
          }      
 
        
       
       
//      // JScrollPane scrollPane1 = new JScrollPane(list);
//       jScrollPane1.setViewportView(list);
//       jScrollPane1.setViewportView(my_authors_list);
       //Books_Edit.add(scrollPane1);
       
        btnNewButton = new JButton("Save");
        btnNewButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		 if(jTextField1.getText().equals("")||jTextField2.getText().equals("")||textField_1.getText().equals("")){
          			JOptionPane.showMessageDialog(null,"Please Fill All Fields");

         		 }
         		else{
	        		book.setTitle(jTextField1.getText());
	        		String s = jTextField2.getText();
	        		try{
	        		int i_i = Integer.parseInt(s);
            		 if(Intro.isInteger(s))
            			book.setPageCount(i_i);
            			
	        		book.setPublishDate(textField_1.toString());
	        		}
	        		catch(Exception e){
	        			book.setPageCount(0);
	        		}
	        		Books.model = (DefaultTableModel) Books.jTable1.getModel();
	        		Books.model.setValueAt(jTextField1.getText(), Books.sel, 0);
	        		Books.model.setValueAt(Integer.parseInt(s), Books.sel, 1);
	        		Books.model.setValueAt(textField_1.getText(), Books.sel, 2);
         		}
        	}
        });
        
        btnDelete = new JButton("Delete");
        btnDelete.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		book.Authors.remove(book.Authors.get(my_authors_list.getSelectedIndex()));
        		//model2.addElement(model.getElementAt(my_authors_list.getSelectedIndex()));
        		model.removeElementAt(my_authors_list.getSelectedIndex());
        	}
        });
        
        lblAuthorsBooks = new JLabel();
        lblAuthorsBooks.setText("Author's Books");
        
        lblAllBooks = new JLabel();
        lblAllBooks.setText("All Books");
        
        lblPublishDate = new JLabel();
        lblPublishDate.setText("Publish Date");
        GroupLayout groupLayout = new GroupLayout(getContentPane());
        groupLayout.setHorizontalGroup(
        	groupLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(Alignment.TRAILING, groupLayout.createSequentialGroup()
        			.addContainerGap(183, Short.MAX_VALUE)
        			.addComponent(btnNewButton)
        			.addGap(174))
        		.addGroup(groupLayout.createSequentialGroup()
        			.addGap(28)
        			.addGroup(groupLayout.createParallelGroup(Alignment.LEADING, false)
        				.addGroup(groupLayout.createSequentialGroup()
        					.addGap(8)
        					.addComponent(lblAuthorsBooks, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(lblAllBooks, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
        					.addContainerGap())
        				.addGroup(groupLayout.createSequentialGroup()
        					.addComponent(my_authors_list, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
        					.addGap(21)
        					.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(groupLayout.createParallelGroup(Alignment.TRAILING, false)
        						.addComponent(btnDelete, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addComponent(jButton1, GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
        					.addGap(21)
        					.addComponent(all_authors_list, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE)
        					.addGap(18)
        					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
        		.addGroup(groupLayout.createSequentialGroup()
        			.addGap(51)
        			.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(lblPublishDate, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 95, GroupLayout.PREFERRED_SIZE))
        			.addGap(43)
        			.addGroup(groupLayout.createParallelGroup(Alignment.LEADING, false)
        				.addComponent(textField_1, GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        				.addComponent(jTextField2)
        				.addComponent(jTextField1))
        			.addGap(125))
        );
        groupLayout.setVerticalGroup(
        	groupLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(groupLayout.createSequentialGroup()
        			.addGap(11)
        			.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel1)
        				.addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(20)
        			.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel2)
        				.addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(25)
        			.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(groupLayout.createSequentialGroup()
        					.addGap(3)
        					.addComponent(lblPublishDate))
        				.addComponent(textField_1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(37)
        			.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblAuthorsBooks)
        				.addComponent(lblAllBooks))
        			.addGap(24)
        			.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(my_authors_list, GroupLayout.PREFERRED_SIZE, 118, GroupLayout.PREFERRED_SIZE)
        					.addComponent(all_authors_list, GroupLayout.PREFERRED_SIZE, 118, GroupLayout.PREFERRED_SIZE))
        				.addGroup(groupLayout.createSequentialGroup()
        					.addGap(20)
        					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        				.addGroup(groupLayout.createSequentialGroup()
        					.addGap(20)
        					.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jButton1))
        					.addGap(27)
        					.addComponent(btnDelete)))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(btnNewButton)
        			.addGap(20))
        );
        getContentPane().setLayout(groupLayout);

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Books_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Books_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Books_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Books_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Books_Edit().setVisible(true);
            }
        });
    }

    DefaultListModel<String> model,model2;
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private JList list_1;
    private JList my_authors_list;
    private JList all_authors_list;
    private JList list;
    private JButton btnNewButton;
    private JButton btnDelete;
    private JLabel lblAuthorsBooks;
    private JLabel lblAllBooks;
    private JLabel lblPublishDate;
    private JTextField textField_1;
}
